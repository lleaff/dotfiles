#!/bin/bash

# Functions and aliases shared by both bash and zsh config
#------------------------------------------------------------

# Make tabs character 4 spaces wide instead of 8
tabs -4

defaultTERM='xterm-256color'
#==========================================

# Locations aliases
test -r "$HOME/.locations" && . "$HOME/.locations"

#==========================================
# Internal utilities

alias _throw_error="hash alkdjflkadsjflhgadsfadfsghadadsf >/dev/null 2>&1"

#==========================================
case "$(uname -s)" in
  #==============================
  #if OSX
  "Darwin" )
    alias xdg-open='open'
    if [ -f "$HOME/Applications/MacVim.app/Contents/MacOS/Vim" ]; then
      alias vim="$HOME/Applications/MacVim.app/Contents/MacOS/Vim"
    fi
    alias gvim='open -a MacVim'
    alias gemacs='open -a Emacs'
  ;;
  #==============================
  #if Windows (Cygwin)
  "CYGWIN_NT"* )
    alias xdg-open='open'
  ;;
  #==============================
  #if Windows (Mingw (Git Bash))
  "MINGW"* )
    alias xdg-open='start'
    alias tree='cmd //c tree'
    #if [ -f "/c/PortableProgramFiles/Vim/Vim.exe" ]; then
    #	alias vim="/c/PortableProgramFiles/Vim/Vim.exe"
    #fi
  ;;
esac

# Sudo
#==========================================
alias sudoe="sudo -E" # Preserve environment variables

# Emacs
#==========================================
EMACSL="/opt/emacs24/bin/emacs"
if [ ! -e $EMACSL ]; then
	EMACSL=$(whereis emacs | cut -d ' ' -f 2)
fi
alias emacsd="$EMACSL --daemon"
alias emacsk="${EMACSL}client -e '(kill-emacs)'"
alias emacsr="emacsk; emacsd"
# -a '' starts a new daemon instance if none exists
alias emacs="${EMACSL}client -nw -a ''"
alias emacsn="${EMACSL}"
alias e="emacs"
alias v="vim"

#==========================================
alias v=vim
#if hash nvim 2>/dev/null; then
#    alias vim=nvim
#fi

VIM_SHARE_FOLDER="$(\find /usr/share/vim/ -name 'vim*' -type d | tail -n1)"
alias vless="vim -u ${VIM_SHARE_FOLDER}/macros/less.vim"

alias tm=tmux
alias tmu=tmux

alias g=git
alias n=node

alias yt=youtube-dl
alias soundcloud-dl=scdl

alias ctest="$HOME/tests/c/testc.sh"
alias formtest="$HOME/tests/c/formtest.sh"

alias pl=swipl
if hash 2>/dev/null ghci-ng; then GHCI=ghci-ng; else GHCI=ghci; fi
alias ghci="$GHCI -v0" # No loading messages

alias dk=docker
#==========================================

# Keep aliases when using sudo
alias sudo='sudo '

if [ -e "$HOME/bin/apt" ]; then
    alias apt="$HOME/bin/apt"
fi
#==========================================

mkcd() {
	mkdir -p "$@" && cd "$@";
}

cdls() {
	cd "$@" && ls --color=auto;
}

cl() {
	cd "$@" && ls --color=auto;
}

mkexe() {
	echo '#!/' >> "$1" && chmod +x "$1"
}

#==========================================
# Yarn run shorthand wrapper
y() {
  local global=""
  if [ "$1" = "g" ]; then
    shift 1
    global="global"
  fi
	case $1 in
		a ) shift 1; command yarn ${global} add "$@" ;;
    r ) shift 1; command yarn ${global} run "$@" ;;
    i ) shift 1; command yarn ${global} install "$@" ;;
    h ) shift 1; command yarn ${global} help "$@" ;;
		* ) command yarn "$@" ;;
	esac
}

# Yarn run shorthand wrapper
yr() {
  if [ $# -eq 0 ]; then
    yarn run start
  else
    yarn run "$@"
  fi
}

#==========================================

__tmuxnewwindow() {
    local q='"'
    if [ -n $(hash "$1" 2>&1) ] && [ -e "$1" ]; then
        if [ -d "$1" ]; then
            local execs="-c $(realpath $1)"
            local q=''
        else
            local execs="less $(echo "$@")"
        fi
    else
        local execs="$(echo "$@")"
    fi
    eval 'tmux new-window '$q"$execs"$q
}

alias tnew=__tmuxnewwindow

__tmuxnewpane() {
    local q='"'
    if [ -n $(hash "$1" 2>&1) ] && [ -e "$1" ]; then
        if [ -d "$1" ]; then
            local execs="-c $(realpath "$1")"
            local q=''
        else
            local execs="less $(echo "$@")"
        fi
    else
        local execs="$(echo $@)"
    fi
    eval 'tmux split-window '$q"$execs"$q
}

alias tpane=__tmuxnewpane

#==========================================

###rm verbose
alias rm="rm -v"

###grep
alias grep="grep --color=auto --exclude-dir=.bzr --exclude-dir=.cvs --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn"

###grep case insensitive
grepi() {
	grep -i --color=auto --exclude-dir=.bzr --exclude-dir=.cvs --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn "$@"
}

###grep recursive
grepr() {
	grep -r --color=auto --exclude-dir=.bzr --exclude-dir=.cvs --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn "$@"
}

#========================================== tmux
# Required alias for 256 colors support
alias tmux="TERM=$defaultTERM tmux"

#========================================== gcc
###autofill -o argument with first arg
gccs() {
	gcc "$@" -pedantic -Wall -o "${1%.*}"
}

__gpluspluss() {
	g++ "$@" -pedantic -Wall -o "${1%.*}"
}
alias g++s=__gpluspluss

###default arguments to compile c programs
gccc99() {
	gcc "$@" -std=c99 -pedantic -Wall -o "${1%.*}"
}

gccc11() {
	gcc "$@" -std=c11 -pedantic -Wall -o "${1%.*}"
}
#==========================================
__testc() {
	gccc11 "$@"
	name="${1%.*}"
	shift
	./$name "$@"
}
alias testc=__testc

#==========================================

# C# build and run
cst() {
  local src="$1"
  local executable="${1%.*}.exe"
  shift
  mcs "$src" && mono "$executable" "$@"
}

#==========================================

random_filename() {
  local length=${1:-10}
  head -c $(( $length * 100 )) /dev/urandom | \
    tr -dc 'a-zA-Z0-9-_' | \
    head -c $length
}

__cleanup_js_dependency_graph() {
  if [ -z "$1" ]; then
    return;
  fi
  local filename="$1"
  sleep 50 && rm "$filename" 2>&1
}

# https://github.com/pahen/madge
__js_dependency_graph() {
  if ! hash madge gvpr  2>/dev/null 1>&2; then
    echo 1>&2 'madge and graphviz need to be installed. Aborting.'
    echo 1>&2 'npm i -g madge'
    echo 1>&2 'apt install graphviz'
    _throw_error
    return
  fi

  if [ -z "$1" ]; then
    echo 1>&2 "Usage: $0 ENTRYPOINT_JAVASCRIPT_FILE"
    _throw_error
    return
  fi

  local filename="/tmp/js_depth_graph-$(random_filename 10).svg"
  madge "$@" --image "$filename"
  if hash xdg-open 2>/dev/null 1>&2; then
    xdg-open "$filename";
  else
    open "$filename";
  fi
  # v Dirty hack
  __cleanup_js_dependency_graph "$filename" &
  disown
}
alias js-dependency-graph=__js_dependency_graph

#==========================================

alias l="ls"
alias la="ls -A"

###simulate improved ls output with find
lsm() {
	case $* in
		-a ) shift 1; command find "$@" -maxdepth "1" ! -name '.' ! -name '..' -printf "%-54.53f%Cd.%Cm.%CY   %s\n" ;;
		* ) command find "$@" -maxdepth "1" ! -name '.' ! -name '..' ! -name '.*' ! -name '~*' -printf "%-54.53f%Cd.%Cm.%CY   %s\n" ;;
	esac
}
lsma() {
	find $1 -maxdepth "1" ! -name '.' ! -name '..' -printf "%-54.53f%Cd.%Cm.%CY   %s\n"
}
lsma() {
	find $1 -maxdepth "1" ! -name '.' ! -name '..' -printf "%-54.53f%Cd.%Cm.%CY   %s\n"
}
lsms() {
	find $1 -maxdepth "1" ! -name '.' ! -name '..' ! -name '.*' ! -name '~*' -printf "%f\n"
}

#original ls under "lso" alias
lso() {
	command ls $*
}

#==========================================

# Prefer python3, but don't alias "python" itself
alias py="python3"
alias pip="pip3"
alias py2="python2"
alias pip2="pip2"

#=========================================

# Syntax highlight colored cat
# pip install pygments
alias pat="pygmentize -g"
alias pcat="pygmentize -g"
pless() { pygmentize -g "$@" | less -R; }

#==========================================

###apt enhancement (debian/ubuntu)
apt() {
	case $1 in
		i ) shift 1; command apt install "$@" ;;
		up ) shift 1; command apt upload "$@" ;;
		upgr* ) shift 1; command apt upgrade "$@" ;;
		rm ) shift 1; command apt remove "$@" ;;
		autorm ) shift 1; command apt autoremove "$@" ;;
		purge ) shift 1; command apt purge "$@" ;;
    ppapurge ) shift 1; command ppa-purge "$@" ;;
		* ) command apt "$@" ;;
	esac
}

#==========================================
append() {
    if [ -z "$1" ] || [ -z "$2"]; then
        echo "Usage: append TEXT DESTINATION"
    fi

    echo "$1" >> "$2";
}

#==========================================

# For node projects
showScripts() {
  jq .scripts "${1:-package.json}" -C | sed 's/^  //' | sed '1,1d' | sed '$ d'
}

#==========================================

alias tree="tree -I 'node_modules|.git' -F --noreport"

#==========================================

ftree() {

    if [ "$#" -gt 0 ] ; then
       dirlist="$@"
    else
       dirlist="."
    fi

    for x in $dirlist; do
         find "$x" -print | sed -e "$SEDMAGIC"
    done
}

#==========================================
# daemonize
__daemonize() {
    if ! hash "$1" 2>/dev/null; then
        echo "Command doesn't exist: \"$1\""
        return
    fi
	nohup "$@" < /dev/null >/dev/null 2>&1 &
	disown > /dev/null 2>&1
}
alias dm=__daemonize

# open
__open() {
	if [ -z "$1" ]; then
		__daemonize xdg-open .
	else
		__daemonize xdg-open "$@"
	fi
}
alias o=__open

#==========================================

psgrep() {
    result=$(ps ax | grep "$@" | grep -v grep | awk '{print $1}') 2>/dev/null
    if [ -z $result ]; then
        hash alkdjflkadsjflhgadsfadfsghadadsf >/dev/null 2>&1 # Return an error
    else
        echo $result;
    fi
}

psauxgrep() {
    result=$(ps aux | grep "$@" | grep -v grep) 2>/dev/null
    if [ -z $result ]; then
        hash alkdjflkadsjflhgadsfadfsghadadsf >/dev/null 2>&1 # Return an error
    else
        echo $result;
    fi
}

#==========================================

crop() {
  "$@" | cut -c-"${COLUMNS}"
}

#==========================================

# Upload file(s) to online pastebin service
pastebinup() {
  local text=""
  if [ "$#" -ne 1 ]; then
    for f in "$@"; do
      echo "Text is: $text"
      if [ -n "$text" ]; then
         local text="${text}\n\n"
      fi
       local text="${text}============================================================\n"
       local text="${text}  $(basename "$f")\n"
       local text="${text}============================================================\n"
       local text="${text}$(cat "$f")"
    done
  else
    local text=$(cat "$1")
  fi
  local url="$(echo "$text" | curl -F 'sprunge=<-' http://sprunge.us)"
  if hash clipcopy 2>/dev/null; then local cliputil=clipcopy;
  elif hash xclip 2>/dev/null; then local cliputil=xclip; fi
  [ -n "$cliputil" ] && echo "$url" | "$cliputil";
  echo "$url"
}

# Upload to sprunge.us
sprunge() {
	cat "$@" | curl -F 'sprunge=<-' 'http://sprunge.us'
}

alias sprungeup="curl -F 'sprunge=<-' 'http://sprunge.us'"

# Upload file to transfer.sh
transfer() { if [ $# -eq 0 ]; then echo -e "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"; return 1; fi
tmpfile=$( mktemp -t transferXXX ); if tty -s; then basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g'); curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile; else curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> $tmpfile ; fi; cat $tmpfile; rm -f $tmpfile; }

#==========================================

# http://serverfault.com/questions/26474/unzipping-files-that-are-flying-in-through-a-pipe
alias unzip-stream="python -c \"import zipfile,sys,StringIO;zipfile.ZipFile(StringIO.StringIO(sys.stdin.read())).extractall(sys.argv[1] if len(sys.argv) == 2 else '.')\""

#==========================================
#if [ -z $(ps aux | grep 'emacs --daemon' | grep -v grep) ]; then
#	$EMACSL --daemon # Start emacs server
#fi
