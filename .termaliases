#!/bin/bash

# Tabs character are 4 spaces wide instead of 8
tabs -4

defaultTERM='xterm-256color'
#==========================================

# Locations aliases
test -r "$HOME/.locations" && source "$HOME/.locations"

#==========================================
#if OSX
if [[ $(uname -s) == "Darwin" ]]; then
	alias xdg-open='open'
	if [[ -f "$HOME/Applications/MacVim.app/Contents/MacOS/Vim" ]]; then
		alias vim="$HOME/Applications/MacVim.app/Contents/MacOS/Vim"
	fi
	alias gvim='open -a MacVim'
	alias gemacs='open -a Emacs'
fi

#==========================================
#if Windows (Cygwin)
if [[ $(uname -s) == "CYGWIN_NT"* ]]; then
	alias xdg-open='open'
fi

#==========================================
#if Windows (Mingw (Git Bash)
if [[ $(uname -s) == "MINGW"* ]]; then
	alias xdg-open='start'
  alias tree='cmd //c tree'
	#if [[ -f "/c/PortableProgramFiles/Vim/Vim.exe" ]]; then
	#	alias vim="/c/PortableProgramFiles/Vim/Vim.exe"
	#fi
fi


# Emacs
#==========================================
EMACSL="/opt/emacs24/bin/emacs"
if [[ ! -e $EMACSL ]]; then
	EMACSL=$(whereis emacs | cut -d ' ' -f 2)
fi
alias emacsd="$EMACSL --daemon"
alias emacsk="${EMACSL}client -e '(kill-emacs)'"
alias emacsr="emacsk; emacsd"
# -a '' starts a new daemon instance if none exists
alias emacs="${EMACSL}client -nw -a ''"
alias emacsn="${EMACSL}"
alias e="emacs"
alias v="vim"

#==========================================
alias v=vim
#if hash nvim 2>/dev/null; then
#    alias vim=nvim
#fi

alias tm=tmux
alias tmu=tmux

alias g=git
alias n=node

alias yt=youtube-dl
alias soundcloud-dl=scdl

alias ctest="$HOME/tests/c/testc.sh"
alias formtest="$HOME/tests/c/formtest.sh"

alias pl=swipl
if hash 2>/dev/null ghci-ng; then GHCI=ghci-ng; else GHCI=ghci; fi
alias ghci="$GHCI -v0" # No loading messages
#==========================================
# Keep aliases when using sudo
alias sudo='sudo '

if [[ -e "$HOME/bin/apt" ]]; then
    alias apt="$HOME/bin/apt"
fi
#==========================================

function mkcd {
	mkdir "$@" && cd "$@";
}

function cdls {
	cd "$@" && ls --color=auto;
}

function cl {
	cd "$@" && ls --color=auto;
}

function mkexe() {
	echo '#!/' >> "$1" && chmod +x "$1"
}

# Upload to sprunge.us
function sprunge() {
	cat "$@" | curl -F 'sprunge=<-' http://sprunge.us
}

#==========================================

function __tmuxnewwindow() {
    local q='"'
    if [[ -n $(hash "$1" 2>&1) ]] && [[ -e "$1" ]]; then
        if [[ -d "$1" ]]; then
            local execs="-c $(realpath $1)" 
            local q=''
        else
            local execs="less $(echo "$@")"
        fi
    else
        local execs="$(echo "$@")"
    fi
    eval 'tmux new-window '$q"$execs"$q
}

alias tnew=__tmuxnewwindow

function __tmuxnewpane() {
    local q='"'
    if [[ -n $(hash "$1" 2>&1) ]] && [[ -e "$1" ]]; then
        if [[ -d "$1" ]]; then
            local execs="-c $(realpath "$1")" 
            local q=''
        else
            local execs="less $(echo "$@")"
        fi
    else
        local execs="$(echo $@)"
    fi
    eval 'tmux split-window '$q"$execs"$q
}

alias tpane=__tmuxnewpane

#==========================================

###rm verbose
alias rm="rm -v"

###grep 
alias grep="grep --color=auto --exclude-dir=.bzr --exclude-dir=.cvs --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn"

###grep case insensitive
function grepi() {
	grep -i --color=auto --exclude-dir=.bzr --exclude-dir=.cvs --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn "$@"
}

###grep recursive
function grepr() {
	grep -r --color=auto --exclude-dir=.bzr --exclude-dir=.cvs --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn "$@"
}

#========================================== tmux
# Required alias for 256 colors support
alias tmux="TERM=$defaultTERM tmux"

#========================================== gcc
###autofill -o argument with first arg
function gccs() {
	gcc "$@" -pedantic -Wall -o "${1%.*}"
}

function g++s() {
	g++ "$@" -pedantic -Wall -o "${1%.*}"
}

###default arguments to compile c programs
function gccc99() {
	gcc "$@" -std=c99 -pedantic -Wall -o "${1%.*}"
}

function gccc11() {
	gcc "$@" -std=c11 -pedantic -Wall -o "${1%.*}"
}
#==========================================
function __testc() {
	gccc11 "$@"
	name="${1%.*}"
	shift
	./$name "$@"
}
alias testc=__testc

#==========================================

# C# build and run
function cst() {
  local src="$1"
  local executable="${1%.*}.exe"
  shift
  mcs "$src" && mono "$executable" "$@"
}

function git() {
	case $1 in
#==========================================

###git enhancement
		add* ) shift 1; command git add -v "$@" ;;
		a ) shift 1; command git add -v "$@" ;;
		status* ) shift 1; command git status -s "$@" ;;
		st ) shift 1; command git status -s "$@" ;;
		s ) shift 1; command git status -s "$@" ;;
		pull* ) shift 1; command git pull -v "$@" ;;
		ls ) shift 1; command git ls-files "$@" ;;
		logf* ) shift 1; command git log --stat --pretty=oneline "$@" ;; #log formatted
		diffc ) shift 1; command git diff --cached "$@" ;;
    ci ) shift 1; command git commit "$@" ;;
    amend ) shift 1; command git commit --amend -m "" "$@" ;;
    quickfix ) shift 1; command git commit --amend -am "" && git push -f ;;
		* ) command git "$@" ;;
	esac
}

alias l="ls"
alias la="ls -A"

###simulate improved ls output with find
function lsm() {
	case $* in
		-a ) shift 1; command find "$@" -maxdepth "1" ! -name '.' ! -name '..' -printf "%-54.53f%Cd.%Cm.%CY   %s\n" ;;
		* ) command find "$@" -maxdepth "1" ! -name '.' ! -name '..' ! -name '.*' ! -name '~*' -printf "%-54.53f%Cd.%Cm.%CY   %s\n" ;;
	esac
}
function lsma() {
	find $1 -maxdepth "1" ! -name '.' ! -name '..' -printf "%-54.53f%Cd.%Cm.%CY   %s\n"
}
function lsma() {
	find $1 -maxdepth "1" ! -name '.' ! -name '..' -printf "%-54.53f%Cd.%Cm.%CY   %s\n"
}
function lsms() {
	find $1 -maxdepth "1" ! -name '.' ! -name '..' ! -name '.*' ! -name '~*' -printf "%f\n"
}

#original ls under "lso" alias
function lso() {
	command ls $*
}

#==========================================
function append() {
    if [[ -z "$1" ]] || [ -z "$2"]; then
        echo "Usage: append TEXT DESTINATION"
    fi

    echo "$1" >> "$2";
}

#==========================================
function ftree() {

    if [ "$#" -gt 0 ] ; then
       dirlist="$@"
    else
       dirlist="."
    fi

    for x in $dirlist; do
         find "$x" -print | sed -e "$SEDMAGIC"
    done
}

#==========================================
# daemonize
function __daemonize() {
    if ! hash "$1" 2>/dev/null; then
        echo "Command doesn't exist: \"$1\""
        return
    fi
	nohup "$@" < /dev/null >/dev/null 2>&1 &
	disown > /dev/null 2>&1
}
alias dm=__daemonize

# open
function __open() {
	if [[ -z "$1" ]]; then
		__daemonize xdg-open .
	else
		__daemonize xdg-open "$@"
	fi
}
alias o=__open

#==========================================

function psgrep {
    result=$(ps ax | grep "$@" | grep -v grep | awk '{print $1}') 2>/dev/null
    if [[ -z $result ]]; then
        hash alkdjflkadsjflhgadsfadfsghadadsf >/dev/null 2>&1 # Return an error
    else
        echo $result;
    fi
}


#==========================================
#if [[ -z $(ps aux | grep 'emacs --daemon' | grep -v grep) ]]; then
#	$EMACSL --daemon # Start emacs server
#fi
